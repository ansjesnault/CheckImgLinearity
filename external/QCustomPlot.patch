diff -Naur qcustomplot.orig/CMakeLists.txt qcustomplot/CMakeLists.txt
--- qcustomplot.orig/CMakeLists.txt	Thu Jan  1 01:00:00 1970
+++ qcustomplot/CMakeLists.txt	Mon Mar 30 00:06:29 2015
@@ -0,0 +1,209 @@
+CMAKE_MINIMUM_REQUIRED(VERSION 2.8.9)
+project(qcustomplot)
+
+##options
+option(BUID_FROM_AMALGAMATE OFF "Build from qcustomplot.h/.cpp directly (default build the whole sources)")
+option(BUILD_SHARED         OFF "Build shared lib (default static)")
+
+## find Qt
+set(Qt5_DIR ${Qt5_DIR} CACHE PATH "Path to <Qt5 installation>/lib/cmake/Qt5")
+set(CMAKE_AUTOMOC ON)
+find_package(Qt5 COMPONENTS Widgets PrintSupport REQUIRED)
+if(NOT Qt5_FOUND)
+    message(SEND_ERROR "Qt5 not found, please set Qt5_DIR to <Qt5 installation>/lib/cmake/Qt5")
+endif()
+if(POLICY CMP0020)
+	cmake_policy(SET CMP0020 NEW) ## auto link to qtmain under windows
+endif()
+
+## add sources
+if(NOT BUID_FROM_AMALGAMATE)
+
+    ## add headers hierarchy
+    set_property(GLOBAL PROPERTY USE_FOLDERS ON)
+    set(HEADERS_SRC
+        src/global.h
+        src/painter.h
+        src/layer.h
+        src/range.h
+        src/axis.h
+        src/plottable.h
+        src/item.h
+        src/lineending.h
+        src/core.h
+        src/layout.h
+        src/colorgradient.h
+    )
+    source_group("src" FILES ${HEADERS_SRC})
+    set(HEADERS_PLOTTABLES
+        src/plottables/plottable-graph.h
+        src/plottables/plottable-curve.h
+        src/plottables/plottable-bars.h
+        src/plottables/plottable-statisticalbox.h
+        src/plottables/plottable-colormap.h
+        src/plottables/plottable-financial.h
+    )
+    source_group("src\\plottables" FILES ${HEADERS_PLOTTABLES})
+    set(HEADERS_ITEMS
+        src/items/item-straightline.h
+        src/items/item-line.h
+        src/items/item-curve.h
+        src/items/item-rect.h
+        src/items/item-text.h
+        src/items/item-ellipse.h
+        src/items/item-pixmap.h
+        src/items/item-tracer.h
+        src/items/item-bracket.h
+    )
+    source_group("src\\items" FILES ${HEADERS_ITEMS})
+    set(HEADERS_LAYOUTELEMENTS
+        src/layoutelements/layoutelement-axisrect.h
+        src/layoutelements/layoutelement-legend.h
+        src/layoutelements/layoutelement-plottitle.h
+        src/layoutelements/layoutelement-colorscale.h
+    )
+    source_group("src\\layoutelements" FILES ${HEADERS_LAYOUTELEMENTS})
+    set(HEADERS ${HEADERS_SRC} ${HEADERS_PLOTTABLES} ${HEADERS_ITEMS} ${HEADERS_LAYOUTELEMENTS})
+    
+    ## create the main qcustomplot.h which centralize all needed includes
+    file(WRITE "${CMAKE_BINARY_DIR}/qcustomplot.h" "//Generated by cmake from src/qcustomplot.h.skeleton\n")
+    file(STRINGS "src/qcustomplot.h.skeleton" qcphskel)
+    foreach(line ${qcphskel})
+        string(REGEX MATCH "//amalgamation:.+" match ${line})
+        if(match)
+            string(REGEX MATCH "//amalgamation: add .+\\.h" match ${match})
+            if(match)
+                string(REGEX REPLACE "//amalgamation: add (.+\\.h)" "\\1" includeFile ${match})
+                if(includeFile)
+                    file(APPEND "${CMAKE_BINARY_DIR}/qcustomplot.h" "#include \"${includeFile}\"\n")
+                endif()
+            endif()
+        else()
+            file(APPEND "${CMAKE_BINARY_DIR}/qcustomplot.h" "${line}\n")
+        endif()
+    endforeach()
+    install(FILES "${CMAKE_BINARY_DIR}/qcustomplot.h" DESTINATION include)
+    install(DIRECTORY src/ DESTINATION include FILES_MATCHING PATTERN *.h)
+    
+    ## add sources hierarchy
+    set(SOURCES_SRC
+        src/painter.cpp
+        src/layer.cpp
+        src/range.cpp
+        src/axis.cpp
+        src/plottable.cpp
+        src/item.cpp
+        src/lineending.cpp
+        src/core.cpp
+        src/layout.cpp
+    )
+    source_group("src" FILES ${SOURCES_SRC})
+    set(SOURCES_PLOTTABLES
+        src/plottables/plottable-graph.cpp
+        src/plottables/plottable-curve.cpp
+        src/plottables/plottable-bars.cpp
+        src/plottables/plottable-statisticalbox.cpp
+        src/plottables/plottable-colormap.cpp
+        src/plottables/plottable-financial.cpp
+    )
+    source_group("src\\plottables" FILES ${SOURCES_PLOTTABLES})
+    set(SOURCES_ITEMS
+        src/items/item-straightline.cpp
+        src/items/item-line.cpp
+        src/items/item-curve.cpp
+        src/items/item-rect.cpp
+        src/items/item-text.cpp
+        src/items/item-ellipse.cpp
+        src/items/item-pixmap.cpp
+        src/items/item-tracer.cpp
+        src/items/item-bracket.cpp
+    )
+    source_group("src\\items" FILES ${SOURCES_ITEMS})
+    set(SOURCES_LAYOUTELEMENTS
+        src/layoutelements/layoutelement-axisrect.cpp
+        src/layoutelements/layoutelement-legend.cpp
+        src/layoutelements/layoutelement-plottitle.cpp
+        src/layoutelements/layoutelement-colorscale.cpp
+        src/colorgradient.cpp
+    )
+    source_group("src\\layoutelements" FILES ${SOURCES_LAYOUTELEMENTS})
+    set(SOURCES ${SOURCES_SRC} ${SOURCES_PLOTTABLES} ${SOURCES_ITEMS} ${SOURCES_LAYOUTELEMENTS})
+    
+    set(RESOURCES )
+    
+else() ## BUID_FROM_AMALGAMATE
+
+    set(HEADERS qcustomplot.h)
+    set(SOURCES qcustomplot.cpp)
+    set(RESOURCES )
+    install(FILES "qcustomplot.h" DESTINATION include)
+
+endif()
+
+## d for Debug suffix in that build mode
+if(DEFINED CMAKE_BUILD_TYPE) ## for mono config type (make/nmake/ninja based)
+    if(${CMAKE_BUILD_TYPE} MATCHES "Debug")
+        set(CMAKE_DEBUG_POSTFIX "d")
+    endif()
+endif()
+foreach(CONFIG_TYPES ${CMAKE_CONFIGURATION_TYPES}) ## for multi config types (MSVC based)
+	if(${CONFIG_TYPES} MATCHES "Debug")
+		set(CMAKE_DEBUG_POSTFIX "d")
+    endif()
+endforeach()
+
+## create lib
+if(BUILD_SHARED)
+    add_definitions(-DQCUSTOMPLOT_COMPILE_LIBRARY)
+    set(LIBRARY_TYPE SHARED)
+else()
+    set(LIBRARY_TYPE STATIC)
+endif()
+add_library(${PROJECT_NAME} ${LIBRARY_TYPE} ${HEADERS} ${SOURCES})
+target_link_libraries(${PROJECT_NAME} Qt5::Widgets Qt5::PrintSupport) 
+set_target_properties(${PROJECT_NAME} PROPERTIES 
+    RESOURCE        "${RESOURCES}"
+    ## see specific install(...) include (to keep headers hierarchy if build from src)
+    #PUBLIC_HEADER   "${HEADERS}"
+)
+
+## Specify default installation rules
+install(TARGETS	    ${PROJECT_NAME} EXPORT QCustomPlot
+    LIBRARY		    DESTINATION lib
+    ARCHIVE		    DESTINATION lib 
+    RUNTIME 	    DESTINATION bin
+    RESOURCE 	    DESTINATION .
+    ## see specific install(...) include (to keep headers hierarchy if build from src)
+    #PUBLIC_HEADER   DESTINATION include
+)
+
+## Export install
+## Example of usage by another project :
+##  set(QCustomPlot_DIR "" CACHE PATH "the installation dir of QCustomPlot")
+##  find_package(QCustomPlot)
+install(EXPORT QCustomPlot DESTINATION cmake)
+file(WRITE "${CMAKE_BINARY_DIR}/QCustomPlotConfig.cmake"
+    "
+    get_filename_component(QCUSTOMPLOT_DIR \"\${CMAKE_CURRENT_LIST_FILE}\" PATH)
+    
+    set(QCUSTOMPLOT_INCLUDE_DIR     \"\${QCUSTOMPLOT_DIR}/include\")
+    set(QCUSTOMPLOT_INCLUDE_DIRS    \"\${QCUSTOMPLOT_INCLUDE_DIR}\")
+    message(STATUS QCUSTOMPLOT_INCLUDE_DIRS=\${QCUSTOMPLOT_INCLUDE_DIRS})
+    
+    if(NOT TARGET ${PROJECT_NAME})
+        include(\"\${QCUSTOMPLOT_DIR}/cmake/QCustomPlot.cmake\")
+    endif()
+    set(QCUSTOMPLOT_LIBRARIES ${PROJECT_NAME}) ## thanks to imported target
+    message(STATUS QCUSTOMPLOT_LIBRARIES=\${QCUSTOMPLOT_LIBRARIES})
+    
+    if(QCUSTOMPLOT_INCLUDE_DIRS AND QCUSTOMPLOT_LIBRARIES)
+        set(QCUSTOMPLOT_FOUND ON)
+        set(QCustomPlot_FOUND ON)
+    else()
+        set(QCUSTOMPLOT_FOUND OFF)
+        set(QCustomPlot_FOUND OFF)
+    endif()
+    message(STATUS QCUSTOMPLOT_FOUND=\${QCUSTOMPLOT_FOUND})
+    "
+)
+install(FILES "${CMAKE_BINARY_DIR}/QCustomPlotConfig.cmake" DESTINATION .)
